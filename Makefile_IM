# *******************Date 12/12/2020********************
# Version: 1.0.1
#
# Author: WangXiaoNan	<imaginemiracle.wxn@outlook.com>
#
# RISCV should either be unset, or set to point to a directory that contains
# a toolchain install tree that was built via other means.
#
# This Makefile based on sifive/freedom-u-sdk/Makefile

RISCV_GNU ?= $(CURDIR)/toolchain
PATH := $(RISCV_GNU)/bin:$(PATH)
ISA ?= rv64imafdc
ABI ?= lp64d

srcdir := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
srcdir := $(srcdir:/=)
confdir := $(srcdir)/conf
wrkdir := $(srcdir)/work

toolchain_srcdir := $(srcdir)/riscv-gnu-toolchain
toolchain_wrkdir := $(wrkdir)/riscv-gnu-toolchain
toolchain_dest := $(CURDIR)/toolchain

linux_srcdir := $(srcdir)/linux
linux_wrkdir := $(wrkdir)/linux
riscv_rootfs := $(srcdir)/riscv-rootfs_IM

linux_defconfig := $(confdir)/linux_defconfig
ifeq ($(BOARD),$(filter vc707devkit,$(BOARD)))
linux_defconfig := $(confdir)/linux_u500vc707devkit_defconfig
endif
ifeq ($(BOARD),$(filter vc707devkit_nopci,$(BOARD)))
linux_defconfig := $(confdir)/linux_u500vc707devkit_nopci_defconfig
endif
ifeq ($(BOARD),$(filter vc707devkit_imiracle,$(BOARD)))
linux_defconfig := $(confdir)/linux_u500_imiracle_defconfig
endif
ifeq ($(BOARD),$(filter vc707devkit_imiracle_v2,$(BOARD)))
linux_defconfig := $(confdir)/linux_u500_9.6M_defconfig
endif
ifeq ($(BOARD),$(filter vc707devkit_imiracle_v3,$(BOARD)))
linux_defconfig := $(confdir)/linux_u500_new_defconfig
endif

vmlinux := $(linux_wrkdir)/vmlinux
vmlinux_stripped := $(linux_wrkdir)/vmlinux-stripped

pk_srcdir := $(srcdir)/riscv-pk
pk_wrkdir := $(wrkdir)/riscv-pk
bbl := $(pk_wrkdir)/bbl
bin := $(wrkdir)/bbl.bin
hex := $(wrkdir)/bbl.hex

target := riscv64-unknown-linux-gnu
#target := riscv64-unknown-elf

.PHONY: all
all: $(hex)
	@echo
	@echo "This image has been generated for an ISA of $(ISA) and an ABI of $(ABI)"
	@echo "Find the image in work/bbl.bin, which should be written to a boot partition"
	@echo
	@echo "To completely erase, reformat, and program a disk sdX, run:"
	@echo "  ./flash-sd-all sdX"
	@echo "  ... you will need gdisk and e2fsprogs installed"
	@echo

ifneq ($(RISCV_GNU),$(toolchain_dest))
$(RISCV_GNU)/bin/$(target)-gcc:
	$(error The RISCV environment variable was set, but is not pointing at a toolchain install tree.)
endif

$(toolchain_dest)/bin/$(target)-gcc: $(toolchain_srcdir)
	mkdir -p $(toolchain_wrkdir)
	$(MAKE) -C $(linux_srcdir) O=$(dir $<) ARCH=riscv INSTALL_HDR_PATH=$(abspath $(toolchain_srcdir)/linux-headers) headers_install
	cd $(toolchain_wrkdir); $(toolchain_srcdir)/configure \
		--prefix=$(toolchain_dest) \
		--with-arch=$(ISA) \
		--with-abi=$(ABI) \
		--enable-linux
	$(MAKE) -C $(toolchain_wrkdir)
	sed 's/^#define LINUX_VERSION_CODE.*/#define LINUX_VERSION_CODE 263682/' -i $(toolchain_dest)/sysroot/usr/include/linux/version.h

$(linux_wrkdir)/.config: $(linux_defconfig) $(linux_srcdir)
	mkdir -p $(dir $@)
	cp -p $< $@
	$(MAKE) -C $(linux_srcdir) O=$(linux_wrkdir) ARCH=riscv olddefconfig
	echo $(ISA)
	echo $(filter rv32%,$(ISA))
ifeq (,$(filter rv%c,$(ISA)))
	sed 's/^.*CONFIG_RISCV_ISA_C.*$$/CONFIG_RISCV_ISA_C=n/' -i $@
	$(MAKE) -C $(linux_srcdir) O=$(linux_wrkdir) ARCH=riscv olddefconfig
endif
ifeq ($(ISA),$(filter rv32%,$(ISA)))
	sed 's/^.*CONFIG_ARCH_RV32I.*$$/CONFIG_ARCH_RV32I=y/' -i $@
	sed 's/^.*CONFIG_ARCH_RV64I.*$$/CONFIG_ARCH_RV64I=n/' -i $@
	$(MAKE) -C $(linux_srcdir) O=$(linux_wrkdir) ARCH=riscv olddefconfig
endif

$(vmlinux): $(linux_srcdir) $(linux_wrkdir)/.config $(riscv_rootfs)
	$(MAKE) -C $< O=$(linux_wrkdir) \
        CONFIG_INITRAMFS_SOURCE="$(riscv_rootfs)" \
        CONFIG_INITRAMFS_ROOT_UID=$(shell id -u) \
        CONFIG_INITRAMFS_ROOT_GID=$(shell id -g) \
        ARCH=riscv \
        vmlinux

$(vmlinux_stripped): $(vmlinux)
	$(target)-strip -o $@ $<

.PHONY: linux-menuconfig
linux-menuconfig: $(linux_wrkdir)/.config
	$(MAKE) -C $(linux_srcdir) O=$(dir $<) ARCH=riscv menuconfig
	$(MAKE) -C $(linux_srcdir) O=$(dir $<) ARCH=riscv savedefconfig
	cp $(dir $<)/defconfig conf/linux_defconfig

$(bbl): $(pk_srcdir) $(vmlinux_stripped)
	rm -rf $(pk_wrkdir)
	mkdir -p $(pk_wrkdir)
	cd $(pk_wrkdir) && $</configure \
		--host=$(target) \
		--with-payload=$(vmlinux_stripped) \
		--enable-logo \
		--with-logo=$(abspath conf/CCITA_logo.txt)
	CFLAGS="-mabi=$(ABI) -march=$(ISA)" $(MAKE) -C $(pk_wrkdir)

$(bin): $(bbl)
	$(target)-objcopy -S -O binary --change-addresses -0x80000000 $< $@

$(hex): $(bin)
	xxd -c1 -p $< > $@

.PHONY: clean
clean:
	rm -rf -- $(wrkdir)

.PHONY: clean-toolchain
clean-toolchain:
	rm -rf -- $(toolchain_dest)

.PHONY: clean-kernel
clean-kernel:
	rm -rf -- $(linux_wrkdir)

.PHONY: clean-bbl
clean-pk:
	rm -rf -- $(pk_wrkdir)/bbl

BBL   = 2E54B353-1271-4842-806F-E436D6AF6985
LINUX = 0FC63DAF-8483-4772-8E79-3D69D8477DE4
FSBL  = 5B193300-FC78-40CD-8002-E86C45580B47

PHONY: format-boot-loader
format-boot-loader: $(bin)
	@test -b $(DISK) || (echo "$(DISK): is not a block device"; exit 1)
	sgdisk --clear                                                               \
        --new=1:2048:67583  --change-name=1:bootloader --typecode=1:$(BBL)  \
        --new=2:264192:     --change-name=2:root       --typecode=2:$(LINUX) \
	$(DISK)
	@sleep 1
ifeq ($(DISK)p1,$(wildcard $(DISK)p1))
	@$(eval PART1 := $(DISK)p1)
	@$(eval PART2 := $(DISK)p2)
else ifeq ($(DISK)s1,$(wildcard $(DISK)s1))
	@$(eval PART1 := $(DISK)s1)
	@$(eval PART2 := $(DISK)s2)
else ifeq ($(DISK)1,$(wildcard $(DISK)1))
	@$(eval PART1 := $(DISK)1)
	@$(eval PART2 := $(DISK)2)
else
	@echo Error: Could not find bootloader partition for $(DISK)
	@exit 1
endif
	dd if=$< of=$(PART1) bs=4096
	mke2fs -t ext3 $(PART2)

.PHONY: sd-write
sd-write: $(bin) #$(dtb)
	#sudo dd if=$(dtb) of=$(DISK) bs=512 count=$(dtb_s) conv=fsync
	sudo dd if=$(bin) of=$(DISK) bs=4096 conv=fsync

.PHONY: Image
Image:
	make -j8 BOARD=vc707devkit

.PHONY: Image_IM
Image_IM:
	make -j8 BOARD=vc707devkit_imiracle

.PHONY: Image_IMv2
Image_IMv2:
	make -j8 BOARD=vc707devkit_imiracle_v2

.PHONY: Image_IMv3
Image_IMv3:
	make -j8 BOARD=vc707devkit_imiracle_v3    

